/*
 * Copyright (Â©) Residential Way, 2016 - 2017, All rights reserved. The
 * intellectual and technical concepts contained herein are proprietary to
 * Residential Way and its suppliers and may be covered by U.S. and Foreign
 * Patents, patents in process, and are protected by trade secret or copyright
 * law. Unauthorized copying of this file, via any medium is strictly
 * prohibited. Proprietary and confidential.
 */
package com.resway.server.framework.entity.repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Logger;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * This Helper class is used to support additional custom querying of the
 * database.
 *
 * @since 1.0.0
 * @author Kevin
 */
public class MySqlDbHelper {
	/** Indicates a reference to the class variable. */
	private static MySqlDbHelper mySqlHelper;

	/**
	 * Creates a single instance of MySqlDbHelper.
	 *
	 * @return single instance of MySqlDbHelper
	 */
	public static MySqlDbHelper getInstance() {
		if (mySqlHelper == null) {
			synchronized (mySqlHelper) {
				if (mySqlHelper == null) {
					mySqlHelper = new MySqlDbHelper();
				}
			}
		}
		return mySqlHelper;
	}

	/** The entity manager. */
	@PersistenceContext
	private EntityManager entityManager;
	/** Establishes a connection (session) with the MySQL database */
	private Connection connection = null;
	/**
	 * Indicates executing a static SQL statement and returning the results it
	 * produces.
	 */
	private Statement statement = null;
	/** Indicates an object that represents a precompiled SQL statement. */
	private PreparedStatement preparedStatement = null;
	/**
	 * Indicates the table of data representing a database result set, which is
	 * usually generated by executing a statement that queries the database.
	 */
	private ResultSet resultSet = null;
	/** The Constant LOGGER. */
	private static final Logger LOGGER = Logger.getLogger(MySqlDbHelper.class.getName());

	/**
	 * Instantiates a new MySqlDbHelper.
	 */
	public MySqlDbHelper() {
		connection = entityManager.unwrap(Connection.class);
	}

	/**
	 * Read data.
	 *
	 * @param query
	 *            Indicates the raw query.
	 * @param args
	 *            Indicates the arguments associated with the query.
	 *
	 * @return resultSet {@link ResultSet} Indicates the table of data
	 *         representing a database result set, which is usually generated by
	 *         executing a statement that queries the database.
	 */
	public ResultSet readData(String query, String[] args) {
		LOGGER.info("Inside MySQLDbHelper.readData");
		try {
			statement = connection.createStatement();
			preparedStatement = connection.prepareStatement(query);
			for (int i = 0; i < args.length; i++) {
				preparedStatement.setString(i + 1, args[i]);
			}
			resultSet = preparedStatement.executeQuery();
		} catch (final SQLException e) {
			LOGGER.log(java.util.logging.Level.SEVERE, "Unable to perform the SQL Operation in MySQLDbHelper.readData for query : " + query, e);
		} finally {
			close();
		}
		LOGGER.info("Exiting MySQLDbHelper.readData");
		return resultSet;
	}

	/**
	 * Closes connection with the database.
	 */
	private void close() {
		try {
			if (resultSet != null) {
				resultSet.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (connection != null) {
				connection.close();
			}
		} catch (final Exception e) {
			LOGGER.log(java.util.logging.Level.SEVERE, "Error while closing connection", e);
		}
	}
}
